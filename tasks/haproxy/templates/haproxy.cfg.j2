#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

{# ----- optional ----- #}
{% if haproxy_stats_enable | default(false) %}
listen stats
    bind {{ haproxy_stats_bind | default('0.0.0.0:1936') }}
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth {{ haproxy_stats_user | default('admin') }}:{{ haproxy_stats_pass | default('changeme') }}
{% endif %}

{%- set masters_ = masters | default([]) -%}
{%- set workers_ = workers | default([]) -%}
{%- set infras_  = infras  | default([]) -%}
{%- set all_ = masters_ + workers_ + infras_ -%}

{# ===== SNO: 모든 트래픽 단일 노드 ===== #}
{% if single_node | default(false) | bool %}
{%   set h = (all_ | first) if (all_ | length > 0) else None %}
listen api-server-6443
    bind *:6443
    mode tcp
    option  httpchk GET /readyz HTTP/1.0
    option  log-health-checks
    balance roundrobin
{% if h %}
    server {{ h.name }} {{ h.ip }}:6443 check weight 1 verify none check check-ssl inter 10s fall 2 rise 3
{% endif %}

listen machine-config-server-22623
    bind *:22623
    mode tcp
    balance roundrobin
{% if h %}
    server {{ h.name }} {{ h.ip }}:22623 check inter 1s
{% endif %}

listen ingress-router-443
    bind *:443
    mode tcp
    balance source
{% if h %}
    server {{ h.name }} {{ h.ip }}:443 check inter 1s
{% endif %}

listen ingress-router-80
    bind *:80
    mode tcp
    balance source
{% if h %}
    server {{ h.name }} {{ h.ip }}:80 check inter 1s
{% endif %}

{# ===== HA: masters / (workers + infras) ===== #}
{% else %}
{%   set _wi = workers_ + infras_ %}
{%   set ingress_targets = _wi if (_wi | length > 0) else masters_ %}

listen api-server-6443
    bind *:6443
    mode tcp
    option  httpchk GET /readyz HTTP/1.0
    option  log-health-checks
    balance roundrobin
{% for m in masters_ %}
    server {{ m.name }} {{ m.ip }}:6443 weight 1 verify none check check-ssl inter 10s fall 2 rise 3
{% endfor %}

listen machine-config-server-22623
    bind *:22623
    mode tcp
    balance roundrobin
{% for m in masters_ %}
    server {{ m.name }} {{ m.ip }}:22623 check inter 1s
{% endfor %}

listen ingress-router-443
    bind *:443
    mode tcp
    balance source
{% for n in ingress_targets %}
    server {{ n.name }} {{ n.ip }}:443 check inter 1s
{% endfor %}

listen ingress-router-80
    bind *:80
    mode tcp
    balance source
{% for n in ingress_targets %}
    server {{ n.name }} {{ n.ip }}:80 check inter 1s
{% endfor %}
{% endif %}
